eval(fs.readFileSync("/Users/iceselkie/bin/utils2.js")+"");
i = await (() => new Promise((resolve, reject) => require('https').get({ hostname: 'adventofcode.com', path: '/2024/day/12/input', headers: { 'User-Agent': 'Human/1.0; NodeJS-Repl/v20.10.0; Darwin/15.2', 'Connection': 'keep-alive', 'Cookie': `session=${process.env.SESSION}`, 'Priority': 'u=0, i', 'Pragma': 'no-cache', 'Cache-Control': 'no-cache' } }, res => { let data = ''; res.on('data', chunk => data += chunk); res.on('end', () => resolve(data.trim())); }).on('error', reject)))();
g = i.grid()
g2 = i.gridl()
done = new Set()
done = new Set(); todo=[g2.find(a=>!done.has(a[0]))[0]];let area=1;let peri=0; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]] d4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,in])=>in?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri++)}
done = new Set(); todo=[g2.find(a=>!done.has(a[0]))[0]];let area=1;let peri=0; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];d4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,in])=>in?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri++)}
dirs4
done = new Set(); regions=[];while(done.size<g2.length){let todo=[g2.find(a=>!done.has(a[0]))[0]];done.add(todo[0]);let area=1;let peri=0; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri++)}; console.log("region",regions.push([area,peri]),area,peri);}
regions.sum(a=>a[0]*a[1])
part 1 (rank 680 in 9m40s)

done = new Set(); regions=[];while(done.size<g2.length){let todo=[g2.find(a=>!done.has(a[0]))[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([area,peri]),area,peri);}
regions.sum(a=>a[0]*a[1].map(a=>a.Js()).uniq().length)
regions.sum(a=>a[0]*a[1].map(a=>a.map(b=>Math.abs(b)).Js()).uniq().length)
regions.sum(a=>a[0]*a[1].map(a=>a.map(b=>Math.abs(b)).Js()).uniq().length)
ex="RRRRIICCFF/RRRRIICCCF/VVRRRCCFFF/VVRCCCJFFF/VVVVCJJCFE/VVIVCCJJEE/VVIIICJJEE/MIIIIIJJEE/MIIISIJEEE/MMMISSJEEE"
done = new Set(); regions=[];while(done.size<g2.length){let todo=[g2.find(a=>!done.has(a[0]))[0]];done.add(todo[0]);let name=g[todo[0].Jp()[0]][todo[0].Jp()[1]][1];let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([name,area,peri]),area,peri);}
g = ex.grid(); g2=ex.gridl();
done = new Set(); regions=[];while(done.size<g2.length){let todo=[g2.find(a=>!done.has(a[0]))[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([area,peri]),area,peri);}
regions.map(a=>{return{area:a[0],peri:a[1].map(a=>a.map(b=>Math.abs(b)).Js()).uniq().length}})
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([area,peri,name]),area,peri);}
regions
ex="RRRRIICCFF\nRRRRIICCCF\nVVRRRCCFFF\nVVRCCCJFFF\nVVVVCJJCFE\nVVIVCCJJEE\nVVIIICJJEE\nMIIIIIJJEE\nMIIISIJEEE\nMMMISSJEEE"
g = ex.grid(); g2=ex.gridl();
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([area,peri,name]),area,peri);}
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",name,regions.push([area,peri,name]),area,peri);}
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);}
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push(vmul(vsub(l,next),vadd(l,next))))};peri=peri.map(a=>a.map(b=>Math.abs(b)).Js()).uniq(); console.log("region",regions.push([area,peri,name]),name,area,peri.length);}
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);}
regions[0][1]
regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort())
regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()
cart=(a,b=a)=>a.map(a=>b.map(b=>[a,b])).flat()
cart([..."abc"])
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2)
regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()
isQuad(['[0,-1]', '[0,0]','[1,-1]', '[1,0]'].map(a=>a.Jp()))
isQuad(['[0,-1]', '[0,0]','[1,-1]', '[1,0]'].map(a=>a.Jp())).prod()
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2).prod()
cart(regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp())))
cart(regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()
regions[0][1].length-13
cart(regions[0][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2
regions.map(([a,p,n])=>[n,a,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2])
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2])
cart(regions[2][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2
cart(regions[2][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp())))
cart(regions[2][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()
cart(regions[2][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2
isQuad([[0,1],[0,2],[0,0],[0,3]])
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()
cart(regions[2][1].map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2])
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>a[1]*a[3])
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).sum(a=>a[1]*a[3])
g = i.grid(); g2=i.gridl();
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);}
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).sum(a=>a[1]*a[3])
g = ex.grid(); g2=ex.gridl();
done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);}
regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).sum(a=>a[1]*a[3])
ex2="AAAAAA\nAAABBA\nAAABBA\nABBAAA\nABBAAA\nAAAAAA"
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).sum(a=>a[1]*a[3])}
part2(ex)
part2(ex2)
part2("EEEEE\nEXXXX\nEEEEE\nEXXXX\nEEEEE")
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.length-cart(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
part2("EEEEE\nEXXXX\nEEEEE\nEXXXX\nEEEEE")
part2("AAAA\nBBCD\nBBCC\nEEEC")
part2("AAAAAA\nAAABBA\nAAABBA\nABBAAA\nABBAAA\nAAAAAA")
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.length-((a,b=a)=>a.map(a=>b.map(b=>[a,b])).flat())(p.map(a=>a.Jp().map(b=>b.Js()).sort()).sort()).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.length-((a,b=a)=>a.map(a=>b.map(b=>[a,b])).flat())(p.map(a=>a.Jp().map(b=>b.Js()))).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
ex3="EEEEE\nEXXXX\nEEEEE\nEXXXX\nEEEEE"
ex4="AAAA\nBBCD\nBBCC\nEEEC"
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()&&vsub(arr[0],arr[3])
isQuad(['[0,-1]', '[0,0]','[1,-1]', '[1,0]'].map(a=>a.Jp()))
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()&&vsub(arr[0],arr[3]).sum()!==1
isQuad(['[0,-1]', '[0,0]','[1,-1]', '[1,0]'].map(a=>a.Jp()))
[ex,ex2,ex3,ex4].map(part2)
part2(ex2)
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()&&vsub(arr[0],arr[3]).sum()!==1&&!console.log(arr.Js())
part2(ex2)
[ex,ex2,ex3,ex4].map(part2)
part2(ex2)
isQuad = arr=>arr.map(a=>vsub(a,arr[0])).T.map(a=>a.groupBy(a=>a,true)).map(gs=>gs.length==2&&gs[0].length==2&&Math.abs(gs[0][0]-gs[1][0])==1).prod()&&vsub(arr[0],arr[3]).sum()!==1
part2(i)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map([n,a,p,es]=>[p.length-((a,b=a)=>a.map(a=>b.map(b=>[a,b])).flat())(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(([n,a,p,es])=>[p.length-((a,b=a)=>a.map(a=>b.map(b=>[a,b])).flat())(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=1;let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area++:peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1]*a[3])}
part2(ex2)
dGrid=(ps)=>{let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0],aabb[0][1]+1).map(i=>range(aabb[1][0],aabb[1][1]+1).map(j=>ps.has([i,j].Js())?"x":".").join("")).join("\n")}
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1].length*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);console.log(dgrid(area))};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1].length*a[3])}
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);console.log(dGrid(area.map(a=>a.Jp())))};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1].length*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(a=>{console.log(a);return a}).sum(a=>a[1].length*a[3])}
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es));return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
dGrid=(ps,es)=>{es=es.map(a=>a[0]+":"+a[1]);let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0]-1,aabb[0][1]+2).map(i=>range(aabb[1][0]-1,aabb[1][1]+2).map(j=>(ps.has([i,j].Js())?"x":".")+hasEdge(es,i,j)).join("")).join("\n")}
hasEdge=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i,j+1].Js()];edges.find(e=>e==(l+":"+r))?"|":edges.find(e=>e==(r+":":l))?":":" "}
hasEdge=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i,j+1].Js()];edges.find(e=>e==(l+":"+r))?"|":edges.find(e=>e==(r+":"+l))?":":" "}
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
part2(ex2)
hasEdge=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i,j+1].Js()];return edges.find(e=>e==(l+":"+r))?"|":edges.find(e=>e==(r+":"+l))?":":" "}
part2(ex2)
hasEdge=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i,j+1].Js()];return edges.find(e=>e==(l+":"+r))?":":edges.find(e=>e==(r+":"+l))?"|":" "}
part2(ex2)
hasEdgeV=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i+1,j].Js()];return edges.find(e=>e==(l+":"+r))?":":edges.find(e=>e==(r+":"+l))?"|":" "}
dGrid=(ps,es)=>{es=es.map(a=>a[0]+":"+a[1]);let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0]-1,aabb[0][1]+2).map(i=>range(aabb[1][0]-1,aabb[1][1]+2).map(j=>[(ps.has([i,j].Js())?"x":".")+hasEdge(es,i,j),"~~"]).T.map(a=>.join(""))).join("\n")}
dGrid=(ps,es)=>{es=es.map(a=>a[0]+":"+a[1]);let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0]-1,aabb[0][1]+2).map(i=>range(aabb[1][0]-1,aabb[1][1]+2).map(j=>[(ps.has([i,j].Js())?"x":".")+hasEdge(es,i,j),"~~"]).T.map(a=>a.join(""))).join("\n")}
part2(ex2)
dGrid=(ps,es)=>{es=es.map(a=>a[0]+":"+a[1]);let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0]-1,aabb[0][1]+2).map(i=>range(aabb[1][0]-1,aabb[1][1]+2).map(j=>[(ps.has([i,j].Js())?"x":".")+hasEdge(es,i,j),"~~"]).T.map(a=>a.join(""))).flat().join("\n")}
part2(ex2)
dGrid=(ps,es)=>{es=es.map(a=>a[0]+":"+a[1]);let aabb=ps.T.map(xy=>[xy.min(),xy.max()]);ps=ps.map(a=>a.Js()).set();return range(aabb[0][0]-1,aabb[0][1]+2).map(i=>range(aabb[1][0]-1,aabb[1][1]+2).map(j=>[(ps.has([i,j].Js())?"x":".")+hasEdge(es,i,j),hasEdgeV(es,i,j)+" "]).T.map(a=>a.join(""))).flat().join("\n")}
part2(ex2)
hasEdgeV=(edges,i,j)=>{let [l,r]=[[i,j].Js(),[i+1,j].Js()];return edges.find(e=>e==(l+":"+r))?"~":edges.find(e=>e==(r+":"+l))?"—":" "}
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps,es).gridl().filter(a=>":|~—".includes(a[1]))
gridEdges=(ps,es)=>dGrid(ps,es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0]))
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n"+gridEdges(a,es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0]))
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0])).Js()
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).Js()
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum())).Js()
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).Js()
part2(ex2)
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).map(a=>[a,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()]).Js()
gridEdges=(ps,es)=>dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1])).groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum().Js()
part2(ex2)
gridEdges=(ps,es)=>[dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1]))].map(a=>[a,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()]).Js()
part2(ex2)
gridEdges=(ps,es)=>[dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1]))].map(a=>[a.length,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()]).Js()
part2(ex2)
gridEdges=(ps,es)=>[dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1]))].map(a=>[-a.length,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()]).sum(a=>-a)
part2(ex2)
gridEdges=(ps,es)=>[dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1]))].map(a=>[-a.length,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()]).Js()
part2(ex2)
gridEdges=(ps,es)=>[dGrid(ps.map(a=>a.Jp()),es).gridl().filter(a=>":|~—".includes(a[1]))].map(a=>[-a.length,a.groupBy(a=>a[1],true).map(a=>a.map(b=>b[0].Jp().map(a=>Math.floor(a/2)))).map(ps=>ps.map(a=>a.Js()).map((p,i,arr)=>dirs4.map(v=>arr.includes(vadd(v,p.Jp()).Js())).sum()).sum()/2).sum()])[0].sum(a=>-a)
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2,p-gridEdges(a,es)]).map(([n,a,p,mp])=>{console.log([n,a.length,p,mp]);return [n,a,p,mp]}).sum(a=>a[1].length*a[3])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2,p-gridEdges(a,es)]).map(([n,a,p,mp,mp2])=>{console.log([n,a.length,p,mp,mp2]);return [n,a,p,mp,mp2]}).sum(a=>a[1].length*a[4])}
part2(ex2)
part2=ex=>{g=ex.grid();g2=ex.gridl();done = new Set(); regions=[];while(done.size<g2.length){let todo=g2.find(a=>!done.has(a[0]));let name=todo[1]; todo=[todo[0]];done.add(todo[0]);let area=[todo[0]];let peri=[]; while (todo.length>0) {let next=todo.pop().Jp();let sym=g[next[0]]?.[next[1]];dirs4.map(v=>vadd(v,next)).map(l=>[l,g[l[0]]?.[l[1]]===sym]).map(([l,i])=>i?!done.has(l.Js())&&todo.push(l.Js())&&done.add(l.Js())&&area.push(l.Js()):peri.push([next,l].Js()))}; console.log("region",regions.push([area,peri,name]),name,area.length,peri.length);};return regions.map(([a,p,n])=>[n,a,p.length,p.map(a=>a.Jp().map(b=>b.Js()))]).map(a=>{console.log(a[3]);return a}).map(([n,a,p,es])=>{console.log(dGrid(a.map(a=>a.Jp()),es)+"\n");return[n,a,p,es]}).map(([n,a,p,es])=>[n,a,p,p-cart(es).map(a=>isQuad(a.flat().map(a=>a.Jp()))).sum()/2,gridEdges(a,es)]).map(([n,a,p,mp,mp2])=>{console.log([n,a.length,p,mp,mp2]);return [n,a,p,mp,mp2]}).sum(a=>a[1].length*a[4])}
part2(ex2)
[ex,ex2,ex3,ex4].map(part2)
part2(i)
part 2 (rank 2917 in 1h23m26s)
